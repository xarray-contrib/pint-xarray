# adapted from xarray's nightly CI
name: Nightly CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: "0 0 * * *"  # Daily "At 00:00" UTC
  workflow_dispatch:

jobs:
  detect-test-upstream-trigger:
    name: "Detect CI Trigger: [test-upstream]"
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    outputs:
      triggered: ${{ steps.detect-trigger.outputs.trigger-found }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
    - uses: keewis/ci-trigger@v1.1
      id: detect-trigger
      with:
        keyword: "[test-upstream]"

  upstream-dev:
    name: upstream-dev
    runs-on: ubuntu-latest
    needs: detect-test-upstream-trigger

    if: |
      always()
      && github.repository == 'xarray-contrib/pint-xarray'
      && (
        github.event_name == 'schedule'
        || github.event_name == 'workflow_dispatch'
        || needs.detect-test-upstream-trigger.outputs.triggered == 'true'
      )

    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8]

    outputs:
      artifacts_availability: ${{ steps.status.outputs.ARTIFACTS_AVAILABLE }}

    steps:
    - name: cancel previous runs
      uses: styfle/cancel-workflow-action@0.6.0
      with:
        access_token: ${{ github.token }}

    - name: checkout the repository
      uses: actions/checkout@v2
      with:
        # need to fetch all tags to get a correct version
        fetch-depth: 0  # fetch all branches and tags

    - name: setup python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: upgrade pip
      run: python -m pip install --upgrade pip

    - name: install dependencies
      run: |
        python -m pip install -r ci/requirements.txt

    - name: install upstream-dev dependencies
      run: bash ci/install-upstream-dev.sh

    - name: install pint-xarray
      run: python -m pip install .

    - name: show versions
      run: python -m pip list

    - name: import pint-xarray
      run: |
        python -c 'import pint_xarray'

    - name: run tests
      if: success()
      id: status
      run: |
        set -euo pipefail
        python -m pytest -rf | tee output-${{ matrix.python-version }}-log || (
          echo '::set-output name=ARTIFACTS_AVAILABLE::true' && false
        )

    - name: Upload artifacts
      if: |
        failure()
        && steps.status.outcome == 'failure'
        && github.event_name == 'schedule'
      uses: actions/upload-artifact@v2
      with:
        name: output-${{ matrix.python-version }}-log
        path: output-${{ matrix.python-version }}-log
        retention-days: 5

  report:
    name: Report
    runs-on: ubuntu-latest
    needs: upstream-dev
    if: |
      always()
      && github.event_name == 'schedule'
      && github.repository == 'xarray-contrib/pint-xarray'
      && needs.upstream-dev.outputs.artifacts_availability == 'true'
    steps:
    - name: checkout the repository
      uses: actions/checkout@v2
    - name: setup python
      uses: actions/setup-python@v2
      with:
        python-version: "3.x"
    - uses: actions/download-artifact@v2
      with:
        path: /tmp/workspace/logs
    - name: Move all log files into a single directory
      run: |
        rsync -a /tmp/workspace/logs/output-*/ ./logs
        ls -R ./logs
    - name: Parse logs
      run: |
        shopt -s globstar
        python .github/workflows/parse_logs.py logs/**/*-log
    - name: Report failures
      uses: actions/github-script@v3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const pytest_logs = fs.readFileSync('pytest-logs.txt', 'utf8');
          const title = "⚠️ Nightly upstream-dev CI failed ⚠️"
          const workflow_url = `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`
          const issue_body = `[Workflow Run URL](${workflow_url})\n${pytest_logs}`

          // Run GraphQL query against GitHub API to find the most recent open issue used for reporting failures
          const query = `query($owner:String!, $name:String!, $creator:String!, $label:String!){
            repository(owner: $owner, name: $name) {
              issues(first: 1, states: OPEN, filterBy: {createdBy: $creator, labels: [$label]}, orderBy: {field: CREATED_AT, direction: DESC}) {
                edges {
                  node {
                    body
                    id
                    number
                  }
                }
              }
            }
          }`;

          const variables = {
              owner: context.repo.owner,
              name: context.repo.repo,
              label: 'CI',
              creator: "github-actions[bot]"
          }
          const result = await github.graphql(query, variables)

          // If no issue is open, create a new issue,
          // else update the body of the existing issue.
          if (result.repository.issues.edges.length === 0) {
              github.issues.create({
                  owner: variables.owner,
                  repo: variables.name,
                  body: issue_body,
                  title: title,
                  labels: [variables.label]
              })
          } else {
              github.issues.update({
                  owner: variables.owner,
                  repo: variables.name,
                  issue_number: issue_info.number,
                  issue_number: result.repository.issues.edges[0].node.number,
                  body: issue_body
              })
          }
