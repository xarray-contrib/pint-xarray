# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python
trigger:
- master

jobs:
- job: Linux
  pool:
    vmImage: 'ubuntu-20.04'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
      Python38:
        python.version: '3.8'
      Python38-upstream-dev:
        python.version: '3.8'
        upstream_dev: true

  steps:
  - template: ci/install.yml
  - template: ci/unit-tests.yml

- job: LintFlake8
  variables:
    python.version: '3.8'
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'
  - bash: python -m pip install flake8
    displayName: Install flake8
  - bash: python -m pip list
    displayName: Version Info
  - bash: python -m flake8
    displayName: flake8 lint checks

- job: FormattingIsort
  variables:
    python.version: '3.8'
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - template: ci/install.yml
  - script: |
      python -m isort --check .
    displayName: isort formatting check

- job: FormattingBlack
  variables:
    python.version: '3.8'
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'
  - bash: python -m pip install black
    displayName: Install black
  - bash: python -m pip list
    displayName: Version Info
  - bash: python -m black --check .
    displayName: black formatting check

- job: FormattingBlackdoc
  variables:
    python.version: '3.8'
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'
  - bash: python -m pip install blackdoc
    displayName: Install blackdoc
  - bash: python -m pip list
    displayName: Version Info
  - bash: python -m blackdoc --check .
    displayName: blackdoc formatting check
